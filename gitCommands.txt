- git clone: create a copy of the target repository.
$ git clone the_remote_repo_.git

- git status: shows the status of your working directory, the untracked and the staged files.
$ git status

- git add: adds the untracked files to the staged area.
$ git add file.ext another_file.ext
$ git add .
$ git add *

- git reset: unstage the staged files to be untracked.
$ git reset Head file.ext

- git commit: adding the staged files to the local repo.
$ git commit -m "description for the committed files"

- git restore: unstage the staged files to be untracked.
$ git restore --staged file.ext

- git branch: lists the branches in the repo.
$ git branch

- git remote: manages set of tracked repositories.
- git remote -v: shows remote url after name
$ git remote -v

- git push: update remote refs along with associated objects.
- git push origin (remote repo) master (local repo): Find a ref that matches master in the source repository (most likely, it would find refs/heads/master), and update the same ref (e.g. refs/heads/master) in origin repository with it. If master did not exist remotely, it would be created.
$ git push origin master

- git push -u origin master: -u or --set-upstream for every branch that is up to date or successfully pushed, add upstream (tracking) reference.
$ git push -u origin master

- git pull: Incorporates changes from a remote repository into the current branch. In its default mode, git pull is shorthand for git fetch followed by git merge FETCH_HEAD.
$ git pull
$ git pull origin

- git help: opens the manual page.
$ git help config

- git config: gets and sets repository or global options.
- git config -l:  -l or --list lists all variables set in config file, along with their values.
$ git config -l

- To augment the output of all queried config options with the origin type (file, standard input, blob, command line) and the actual origin (config file path, ref, or blob id if applicable).
$ git config -l --show-origin

- To get a value
$ git config --global user.name

- To set a value
$ git config --global user.name "The_Value"

- To delete a value
$ git config --global --unset user.name
$ git config --global user.name ""

- To open the configuration in the editor:
$ git config --global --edit

- Public key:
$ ssh-keygen -t rsa -b 4096 -c "mail@gmail.com"

- To show the content of the public key file saved:
$ cat path_to_file

- To authenticate your login:
$ ssh -T git@github.com

- git init: initialize a repo.
$ git init

- Aliases: To create an alias for a command.
$ git config --global alias.st status
$ git config --global alias.st
$ git st

$ git config --global alias.cm "commit -m"
$ git cm

- branch: to show the branches.
$ git branch

- To create a branch.
$ git branch branch_name

- To switch branches or restore working tree files
$ git checkout branch_name

- To create a new branch and switch to it.
$ git checkout -b branch-name

- To rename a branch.
$ git branch -m new_branch_name

- To merge a branch after switching to the master branch.
$ git merge branch_name

- To delete a branch - won't delete if unmerged.
$ git branch -d branch_name

- To delete a branch even if it's unmerged.
$ git branch -D branch_name

- stash: hide the changes in a dirty working directory away.
$ git stash

- To stash with a custom message.
$ git stash save "custom message"

- To list the stashed changes:
$ git stash list

- To pop the last change aftr stashing and delete it from the list:
$ git stash pop

- To pop the last change aftr stashing without deleting it from the list
$ git stash apply

- To remove a specific saved stash depending on its id number.
$ git stash pop stash@{2}

- To remove a specific stash or the last one for ever from the saved stash list.
$ git stash drop stash{1}
$ git stash drop

- To show the content of the last stashed
$ git stash show

- To delete all the saved stashes.
$ git stash clear

- To create a new branch with the latest stash, and then deletes the latest stash ( like stash pop).$ git stash branch branch_name
$ git stash branch branch_name stash@{1}